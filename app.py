from parser import parse
from parse_email import extract_email_from_notary_page
from docx_replacer import fill_doc
from gpt import extract_notary_data
from config import ADMIN_ID
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command, BaseFilter
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from config import BOT_TOKEN, ALLOWED_USERS
import asyncio
import os
import json
import keyboards as kb
from datetime import datetime
from utils import add_user, is_user_allowed, get_user_list, remove_user
from datetime import datetime, timedelta







bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


class Data(StatesGroup):
    user_folder = State()
    text = State()
    file_type = State()

class AccessRequestCallback:
    APPROVE = "approve"
    REJECT = "reject"


def is_authorized(func):
    async def wrapper(message: Message, *args, **kwargs):
        if is_user_allowed(message.from_user.id):
            return await func(message, *args, **kwargs)
        else:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –•–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ?",
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="request_access")]
                             ]))
    return wrapper


@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª(—ã)")


@dp.message(Command("users"))
async def list_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    users = get_user_list()
    if not users:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for uid, info in users.items():
        name = f"{info.get('first_name', '')} {info.get('last_name', '')}".strip()
        username = f"@{info.get('username')}" if info.get('username') else "‚Äî"
        text += f"‚Ä¢ <b>{name}</b> {username} ‚Äî <code>{uid}</code>\n/remove_{uid}\n\n"

    await message.answer(text, parse_mode="HTML")


@dp.message(F.text.startswith("/remove_"))
async def remove_user_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    user_id = int(message.text.split("_")[1])
    remove_user(user_id)
    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
    try:
        await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except:
        pass  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞




@dp.callback_query(F.data == "request_access")
async def request_access(callback: CallbackQuery):
    await callback.message.edit_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    user = callback.from_user
    await callback.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ 7 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:7")],
        [InlineKeyboardButton(text="‚úÖ 14 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:14")],
        [InlineKeyboardButton(text="‚úÖ 30 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:30")],
        [InlineKeyboardButton(text="‚úÖ –ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"grant:{user.id}:0")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny:{user.id}")]
    ])

    await bot.send_message(ADMIN_ID,
        f"üì• –ó–∞–ø—Ä–æ—Å –æ—Ç @{user.username or '-'}\nID: {user.id}\n–ò–º—è: {user.first_name}",
        reply_markup=keyboard)
    
    
@dp.callback_query(F.data.startswith("grant:"))
async def grant_access(callback: CallbackQuery):
    _, user_id, days = callback.data.split(":")
    user_id = int(user_id)
    days = int(days)

    user = await bot.get_chat(user_id)

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if days == 0:
        until = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    else:
        end_date = datetime.now() + timedelta(days=days)
        until = end_date.strftime("%d.%m.%Y")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
    add_user(user_id, user.first_name, user.last_name or "", user.username or "", days)

    await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –¥–æ {until}." if days else "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        )
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ + –ø–∏—à–µ–º –∫–æ–º—É –≤—ã–¥–∞–Ω–æ)
    full_name = f"{user.first_name} {user.last_name}".strip()
    username = f"@{user.username}" if user.username else ""
    await callback.message.edit_text(
        f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_name} {username} (ID: <code>{user_id}</code>) –¥–æ <b>{until}</b>.",
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("deny:"))
async def deny_access(callback: CallbackQuery):
    _, user_id = callback.data.split(":")
    await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    try:
        await bot.send_message(user_id, "üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    except:
        pass










@dp.message(F.document)
@is_authorized
async def handle_pdf(message: Message, state: FSMContext, **kwargs):
    document = message.document

    if document.mime_type != "application/pdf":
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª(—ã)")
        return

    user_folder = f"temp/{message.from_user.id}"
    os.makedirs(user_folder, exist_ok=True)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
    for f in os.listdir(user_folder):
        file_path = os.path.join(user_folder, f)
        if os.path.isfile(file_path):
            os.remove(file_path)


    file_path = f"{user_folder}/{document.file_name}"



    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    await state.update_data(user_folder=user_folder)
    await state.set_state(Data.file_type)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞", reply_markup=kb.select_file_type)

@dp.message(Data.file_type)
async def handle_file_type(message: Message, state: FSMContext):
    if message.text not in ["–ê–π—Å–æ–∏–ø", "–ï–Ω–∏—Å"]:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞", reply_markup=ReplyKeyboardRemove())
        return
    
    await state.update_data(file_type = message.text)
    await state.set_state(Data.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ", reply_markup=ReplyKeyboardRemove())



@dp.message(Data.text)
async def handle_text(message: Message, state: FSMContext):

    # try:
    await state.update_data(text = message.text)

    data = await state.get_data()
    await state.clear()

    user_data = extract_notary_data(data["text"])
    
    date_notification = user_data["date_notification"]
    if date_notification == "—Å–µ–≥–æ–¥–Ω—è":
        date_notification = datetime.today().strftime("%d.%m.%Y")
    

    pdf_files = [f for f in os.listdir(data["user_folder"]) if f.lower().endswith(".pdf")]

    for filename in pdf_files:
        try:
            full_path = os.path.join(data["user_folder"], filename)
            file_data = parse(full_path)
            

            email = extract_email_from_notary_page(file_data["–§–ò–û –Ω–æ—Ç–∞—Ä–∏—É—Å–∞"])

            if email == "–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞!":
                await message.answer(f"–§–ò–û: {file_data['–§–ò–û –Ω–æ—Ç–∞—Ä–∏—É—Å–∞']}. –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞!")
            elif email:
                pass  # –≤—Å—ë –æ–∫, email –Ω–∞–π–¥–µ–Ω
            else:
                await message.answer(f"–ü–æ—á—Ç–∞ –Ω–æ—Ç–∞—Ä–∏—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –§–ò–û: {file_data['–§–ò–û –Ω–æ—Ç–∞—Ä–∏—É—Å–∞']}")


            

            replacements = {
                "–§–ò–û_–Ω–æ—Ç–∞—Ä–∏—É—Å–∞": file_data["–§–ò–û –Ω–æ—Ç–∞—Ä–∏—É—Å–∞"],
                "–ê–¥—Ä–µ—Å_–Ω–æ—Ç–∞—Ä–∏—É—Å–∞": email,
                "–§–ò–û_–∑–∞—ë–º—â–∏–∫–∞": file_data["–§–ò–û –∑–∞—ë–º—â–∏–∫–∞"],
                "–ò–ò–ù": file_data["–ò–ò–ù"],
                "–î–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è": file_data["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"],
                "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ_–≤_—Ä–µ–µ—Å—Ç—Ä–µ": file_data["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"],
                "–î–∞—Ç–∞_—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è": file_data["–î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"],
                "–Æ—Ä_–ª–∏—Ü–æ_—Å_–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º": file_data["–Æ—Ä. –ª–∏—Ü–æ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º/—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º"],
                "–§–ò–û_–∑–∞—ë–º—â–∏–∫–∞_–∏–Ω–∏—Ü–∏–∞–ª—ã": file_data["–§–ò–û –∑–∞—ë–º—â–∏–∫–∞ (–∏–Ω–∏—Ü–∏–∞–ª—ã)"],
                "–õ–∏—Ü–µ–Ω–∑–∏—è_–Ω–æ—Ç–∞—Ä–∏—É—Å–∞": file_data["–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–æ—Ç–∞—Ä–∏—É—Å–∞"],
                "–Æ—Ä_–ª–∏—Ü–æ": file_data["–Æ—Ä. –ª–∏—Ü–æ"],
                "–ò—Ç–æ–≥–æ_–∫_–≤–∑—ã—Å–∫–∞–Ω–∏—é": file_data["–ò—Ç–æ–≥–æ –∫ –≤–∑—ã—Å–∫–∞–Ω–∏—é"],
                "–ë–ò–ù": file_data["–ë–ò–ù"],
                "–ê–¥—Ä–µ—Å_–∫–æ–º–ø–∞–Ω–∏–∏": file_data["–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏"],
                "–°—É–º–º–∞_–¥–æ–ª–≥–∞": file_data["–°—É–º–º–∞ –¥–æ–ª–≥–∞"],
                "–°—É–º–º–∞_—Ä–∞—Å—Ö–æ–¥–æ–≤": file_data["–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"],
                "–î–∞—Ç–∞_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": date_notification,
                "–î–∞—Ç–∞_—Å–µ–≥–æ–¥–Ω—è": datetime.today().strftime("%d.%m.%Y"),
            }

            if data["file_type"] == "–ê–π—Å–æ–∏–ø":
                if file_data["–¢–∏–ø —é—Ä. –ª–∏—Ü–∞"] == "–ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ":
                    fill_doc("templates/aisoip/bvu.docx", data["user_folder"] + "/output.docx", replacements)
                    
                elif file_data["–¢–∏–ø —é—Ä. –ª–∏—Ü–∞"] == "–¢–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é":
                    fill_doc("templates/aisoip/mfo.docx", data["user_folder"] + "/output.docx", replacements)
                    

            elif data["file_type"] == "–ï–Ω–∏—Å":
                if file_data["–¢–∏–ø —é—Ä. –ª–∏—Ü–∞"] == "–ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ":
                    fill_doc("templates/enis/bvu.docx", data["user_folder"] + "/output.docx", replacements)
                    
                elif file_data["–¢–∏–ø —é—Ä. –ª–∏—Ü–∞"] == "–¢–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é":
                    fill_doc("templates/enis/mfo.docx", data["user_folder"] + "/output.docx", replacements)
                    

            original_file = FSInputFile(full_path, filename=filename)
            generated_file = FSInputFile(data["user_folder"] + "/output.docx", filename=file_data["–§–ò–û –∑–∞—ë–º—â–∏–∫–∞ (–∏–Ω–∏—Ü–∏–∞–ª—ã)"] + " " + file_data["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"] + ".docx")

            await bot.send_document("-4628190626", original_file, caption=data["text"])
            await message.answer_document(original_file, caption="üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PDF")
            await message.answer_document(generated_file, caption="üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
            await message.answer("üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filename}:\n{str(e)}")
    # except Exception as e:
    #     await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")
    








async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())




























